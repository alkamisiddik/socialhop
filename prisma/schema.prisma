// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String    @id
  email_address String?   @unique
  first_name    String?
  last_name     String?
  image_url     String?
  banner_url    String?
  banner_id     String?
  username      String?   @unique
  posts         Post[]
  likes         Like[]
  comments      Comment[]
}

model Post {
  id        Int       @id @default(autoincrement())
  postText  String?
  media     String?
  author    User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String
  cld_id    String?
  createdAt DateTime  @default(now())
  likes     Like[]
  comments  Comment[]
  trends    Trend[]
}

model Like {
  id        Int      @id @default(autoincrement())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String
  createdAt DateTime @default(now())
}

model Comment {
  id        Int      @id @default(autoincrement())
  comment   String?
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int
  createdAt DateTime @default(now())
}

model Trend {
  id     Int   @id @default(autoincrement())
  name   String
  post   Post  @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId Int
}